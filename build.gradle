import groovy.io.FileType
import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider
import com.amazonaws.services.s3.AmazonS3Client

apply plugin: 'java-library'
apply plugin: 'maven-publish'

group = 'com.mojang'
version = project.hasProperty('buildNumber') ? "${project.majorMinor}.${project.buildNumber}" : "${project.majorMinor}.0-SNAPSHOT"

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://libraries.minecraft.net"
        }
    }

    dependencies {
        classpath 'com.amazonaws:aws-java-sdk:1.11.33'
    }
}

repositories {
    maven {
        url "https://libraries.minecraft.net"
    }
    mavenCentral()
}

configurations {
    jacoco
    jacocoRuntime
}

dependencies {
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.apache.logging.log4j:log4j-api:2.8.1'
    compile 'com.google.guava:guava:21.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'it.unimi.dsi:fastutil:7.1.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
    jacoco group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.8.1', classifier: 'nodeps'
    jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.1', classifier: 'runtime'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

artifacts {
    archives jar
    archives sourcesJar
}

test {
    testLogging {
        events "failed", "skipped"
        showStandardStreams = true
        showExceptions true
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

task instrument(dependsOn: ['classes']) {
  ext.outputDir = buildDir.path + '/classes-instrumented'
  doLast {
    ant.taskdef(name: 'instrument', classname: 'org.jacoco.ant.InstrumentTask', classpath: configurations.jacoco.asPath)
    ant.instrument(destdir: outputDir) {
      fileset(dir: sourceSets.main.output.classesDir)
    }
  }
}

gradle.taskGraph.whenReady { graph ->
  if (graph.hasTask(instrument)) {
    tasks.withType(Test) {
      doFirst {
        systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/tests.exec'
        classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
      }
    }
  }
}

task report(dependsOn: ['instrument', 'test']) {
  doLast {
    ant.taskdef(name: 'report', classname: 'org.jacoco.ant.ReportTask', classpath: configurations.jacoco.asPath)
    ant.report() {
      executiondata {
        ant.file(file: buildDir.path + '/jacoco/tests.exec')
      }
      structure(name: 'Example') {
         classfiles {
           fileset(dir: sourceSets.main.output.classesDir)
         }
         sourcefiles {
           fileset(dir: 'src/main/java')
         }
      }
      html(destdir: buildDir.path + '/reports/jacoco')
    }
    println "##teamcity[buildNumber '${project.version}']"
  }
}

def publishDir = file("$buildDir/repo")


def uploadFile(s3, bucket, path, filename) {
    println "Uploading $filename to $bucket as $path"
    s3.putObject(bucket, path, filename)
}

clean.doLast {
    delete publishDir
}

if (version.endsWith("SNAPSHOT")) {
    publishing.repositories {
        mavenLocal()
    }
} else {
    publishing.repositories {
        maven {
           url "$buildDir/repo"
        }
    }

    publish.doLast {
        def AWSRoleARN = (System.getenv("AWS_ROLE_ARN") != null && System.getenv("AWS_ROLE_ARN") != "" ? System.getenv("AWS_ROLE_ARN") : null)
        if (AWSRoleARN == null) throw new GradleException("AWS Role has not been configured, use the `AWS_ROLE_ARN` environment variable")
        def auth = new STSAssumeRoleSessionCredentialsProvider.Builder(AWSRoleARN, "DataFixerUpperPublish").build()
        def s3 = new AmazonS3Client(auth)
        publishDir.eachFileRecurse {
            if (!it.name.contains(".xml") && !it.name.contains(".md5") && it.isFile()) {
                def relPath = publishDir.toPath().relativize(it.toPath()).toFile().toString().replaceAll('\\\\', '/')
                uploadFile(s3, "minecraft-libraries", relPath, it)
            }
        }
    }
}
